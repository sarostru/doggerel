; equality tests
(define n_passed 0)
(define n_failed 0)

(define (run-test pred? lhs compares_to rhs)
  (if (pred?)
    (let ((_ (set! n_passed (+ n_passed 1))))
      (display "SUCCESS: %_ %_ %_" lhs compares_to rhs))
    (let ((_ (set! n_failed (+ n_failed 1))))
      (display "FAILURE: %_ %_ %_" lhs compares_to rhs))))


(define (assert-equal x y)
  (run-test (lambda () (= x y)) x " is equal to " y))

(define (assert-not-equal x y)
  (run-test (lambda () (!= x y)) x " is not equal to " y))

(define (id_func x) x)
(display "***********************")
(display "Things that are equal:")
(display "***********************")
(assert-equal 0 0)
(assert-equal 17 17)
(assert-equal "" "")
(assert-equal "left" "left")
(assert-equal "left right" "left right")
(assert-equal "(cons 5 ())" "(cons 5 ())")
(assert-equal id_func id_func)
(assert-equal 17 (id_func 17))
(assert-equal "thing" (id_func "thing"))
(assert-equal (id_func "thing") (id_func "thing"))
(assert-equal (id_func "thing") "thing")


(display "***********************")
(display "Things that are not equal:")
(display "***********************")
(assert-not-equal 0 1)
(assert-not-equal "left" "right")
(assert-not-equal "(cons 5 ())" (cons 5 ()))
(assert-not-equal 17 "some string")
(assert-not-equal "some string" 17)
(assert-not-equal "some string" id_func)
(assert-not-equal id_func "some string")
(define (some_other_func) "result string")
(assert-not-equal id_func some_other_func)
(assert-not-equal some_other_func id_func)
(assert-not-equal id_func (lambda (x) x))
(assert-not-equal (lambda (x) x) id_func)
