defpackage skanren:
    import core
    import reader
    import collections
    import typeof

deftype Expression <: Equalable

deftype Environment <: Table<StringSymbol, True|False|List|Array|Int|String|Expression>
deftype EmptyEnvironment <: Environment
defmulti parent (env:Environment) -> Environment
defmulti set-direct (env:Environment, k:StringSymbol, v) -> False
defmulti to-env-list (env:Environment) -> List<HashTable<StringSymbol, True|False|List|Array|Int|String|Expression>>


public defn Environment (parent:Environment) -> Environment:
    val _parent:Environment = parent
    val env = HashTable<StringSymbol, True|False|List|Array|Int|String|Expression>()
    new Environment :
        ; Table Implementation Methods
        defmethod to-seq (this):
            match(parent):
                (p:EmptyEnvironment) : to-seq(env)
                (p:Environment) : cat(to-seq(env), to-seq(p))
        defmethod length (this):
            match(parent):
                (p:EmptyEnvironment) : length(env)
                (p:Environment) : length(p) + length(env)
        defmethod set (this, k:StringSymbol, v):
            match(find(key?{_, k}, to-env-list(this))):
                (f_env:Table) : f_env[k] = v
                (f_env:False) : env[k] = v
        defmethod get? (this, k:StringSymbol, d):
            match(find(key?{_, k}, to-env-list(this))):
                (f_env:Table) : f_env[k]
                (f_env:False) : d
        defmethod get (this, k:StringSymbol):
            find!(key?{_, k}, to-env-list(this))[k]
        defmethod remove (this, k:StringSymbol):
            match(find(key?{_, k}, to-env-list(this))):
                (f_env:Table) : remove(f_env, k)
                (f_env:False) : false
        defmethod clear (this):
            clear(env)
            match(parent):
                (p:EmptyEnvironment) : false
                (p:Environment) : clear(p)

        ; Environment specific function calls
        defmethod parent (this) : _parent
        defmethod set-direct (this, k, v):
            ; println("set-direct[%_] = %_" % [k, v])
            env[k] = v
        defmethod to-env-list (this):
            match(_parent):
                (p:EmptyEnvironment) : List(env)
                (p:Environment) : cons(env, to-env-list(p))


public defn Environment () -> Environment:
    Environment(new EmptyEnvironment)


defstruct Lambda <: Expression :
    ; TODO:: Unevaluated expressions are lists, so body ends up a 1-length list
    ;        which gets hit once with a Head to access it which is ugly, need to
    ;        be more precise about the input types to this interpreter
    arg_names : List<StringSymbol>
    body : List
    l-env : Environment


defn apply (env:Environment, lambda:Lambda, args) -> True|False|List|Array|Int|String|Expression:
    ; println("apply: lambda = %_, args = %_" % [lambda, args])
    val arg_names = arg_names(lambda)
    val body = body(lambda)
    val l-env = l-env(lambda)
    ; println("apply: env = %," % [env])
    ; no laziness here, eval those args!
    val evaled-args = map({eval(env, _)}, args)
    ; println("apply: evaled-args = %_, env = %@" % [evaled-args, to-seq(env)])
    ; extend environment
    val local_env = Environment(l-env)
    ; map({env[gensym(_)] = _}, arg_names, evaled-args)
    map({set-direct(local_env, _, _)}, arg_names, evaled-args)
    ; println("apply: local_env = %," % [local_env])
    ; println("apply: body = %_" % [body])
    ; eval in that environment
    val result = eval(local_env, head(body))
    ; println("apply: result = %_" % [result])
    result


defn eval-cond (env:Environment, L) -> True|False|List|Array|Int|String|Expression:
    ; Not handling else correctly here, also not sure about what correct behaviour is
    ; if nothing matches, do nothing or raise error?
    defn eval-item (v):
        if head(v) == `else :
            One(last(v))
        else:
            match(eval(env, head(v))):
                (r:True) : One(last(v))
                (r:False) : None()
    match(first(eval-item, L)):
        (v:One) : eval(env, value(v)) 
        (v:None) : false


defn eval-define (env:Environment, name_or_signature, body):
    ; I think we need to wrap everything in Maybes, since by adding booleans I have
    ; mixed up the meaning of false, in the first pass false wasn't in the language so 
    ; it meant an underlying language thing only, but now define returns false so it
    ; can work as part of a predicate which is weird
    match(name_or_signature):
        (name:StringSymbol) : env[name] = eval(env, body)
        (signature:List) : 
            ; syntax sugar for lambdas
            val name = head(signature)
            val lambda = List(`lambda, tail(signature), body)
            eval-define(env, name, lambda)

defn eval-eq (env: Environment, lhs, rhs) -> True|False:
    ; Compare value equality of primitives.
    val x = eval(env, lhs)
    val y = eval(env, rhs)
    match(x, y):
        (x_p:True|False|Int|String|Array|List,
         y_p:True|False|Int|String|Array|List) : x_p == y_p
        (x_p:Lambda, y_p:Lambda) :
            ; println("eval-eq lambdas: lhs = %_, rhs = %_" % [lhs, rhs])
            match(lhs, rhs):
                ; TODO:: Comparing StringSymbol's doesn't work, since they could be arguments
                ;        to a function and be relabeled and inserted into a sub-env.  Instead
                ;        I need to augment the Lambda with a location/id tag
                ;        maybe stanza already has an object id I can use?
                ; (lhs:StringSymbol, rhs:StringSymbol) : lhs == rhs
                (lhs, rhs) : false
        (x_p, y_p) : false


defn eval-exp (env:Environment, s-exp) -> True|False|List|Array|Int|String|Expression:
    val L = s-exp
    ; println("eval-exp(s-exp = %_" % [s-exp])
    ; curly braces are partial function evaluation
    switch {head(L) == _}:
        `+ : 
            val a = eval(env, L[1]) as Int
            val b = eval(env, L[2]) as Int
            val c:Int = a + b
            ; println("%_ + %_ = %_" % [a, b, c])
            c
        `define :
            ; println("define(%_, %_)" % [L[1], L[2]])
            eval-define(env, L[1], L[2])
        `set! :
            ; println("set!(%_, %_)" % [L[1], L[2]])
            env[L[1]] = eval(env, L[2])
        `lambda :
            ; println("lambda: %@" % [L])
            ; println("lambda-types: %@" % [seq(object-type, L)])
            Lambda(L[1], tailn(L, 2), env)
        `procedure? :
            ; println("procedure? %_" % [L[1]])
            match(eval(env, L[1])):
                (v:Lambda) : true
                (v:True|False|Int|String|List) : false
        `let :
            ; println("let %@" % [tail(L)])
            val lambda = Lambda(map(head, L[1]), tailn(L, 2), env)
            val args = map(last, L[1])
            apply(env, lambda, args)
        `cond :
            ; println("cond %@" % [tail(L)])
            eval-cond(env, tail(L))
        `= :
            ; println("= %@" % [tail(L)])
            eval-eq(env, L[1], L[2])
        `!= :
            ; println("!= %@" % [tail(L)])
            not eval-eq(env, L[1], L[2])
        `if :
            ; println("if %@" % [tail(L)])
            val cond-exp = List(List(L[1], L[2]), List(`else, L[3]))
            eval-cond(env, cond-exp)
        `and :
            ; println("and %@" % [tail(L)])
            var acc = true
            label<False> break:
                for v in tail(L) do:
                    acc = acc and (eval(env, v) as True|False)
                    if not acc: break(false)
            acc
        `cons :
            ; println("cons %@" % [tail(L)])
            val a = eval(env, L[1])
            val b = eval(env, L[2])
            cons(a, b as List)
        `car :
            ; println("car %@" % [tail(L)])
            head(eval(env, L[1]) as List)
        `cdr :
            ; println("cdr %@" % [tail(L)])
            tail(eval(env, L[1]) as List)
        `null? :
            ; println("null? %@" % [tail(L)])
            eval(env, L[1]) == `()
        `pair? :
            ; in my implementation you can't make a Non-list cons apair
            match(eval(env, L[1])):
                (l:List) : length(l) == 2
                (p:True|False|Array|Int|String|Expression) : false
        `assp :
            ; return first element of L2 that for which L[1] evaluates to True
            defn f (x:True|False|List|Array|Int|String|Expression) -> True|False:
               eval(env, cons(L[1], List(x))) as True|False 
                
            find(f, eval(env, L[2]) as List)
        `vector :
            ; println("vector %@" % [tail(L)])
            to-array<True|False|List|Array|Int|String|Expression>(map({eval(env, _)}, tail(L)))
        `vector? :
            eval(env, L[1]) is Array
        `vector-ref :
            ; println("vector-ref %@" % [tail(L)])
            get(eval(env, L[1]) as Array, eval(env, L[2]) as Int)
        `@quote :
            ; println("quote %@" % [tail(L)])
            ; Not sure how to implement this? Can probably do without
            last(L)
        `require :
            ; eval code from file accepting a file name as a string
            val form = unwrap-all(read-file(eval(env, L[1]) as String))
            for s-exp in form do:
                eval(env, s-exp)
        `display :
            ; pass directly onto the stanza println + string format
            val fmt = eval(env, L[1]) as String 
            val substitutions = seq({eval(env, _)}, tailn(L, 2))
            println(fmt % substitutions)
            
        else :
            val lambda = eval(env, head(L)) as Lambda
            apply(env, lambda, tail(L))


public defn eval (env:Environment, s-exp) -> True|False|List|Array|Int|String|Expression:
    ; println("s-exp = %_, type = %_" % [s-exp, object-type(s-exp)])
    match(s-exp):
        (b:True|False) :
            ; println("Bool(%_)" % [b])
            b
        (i:Int) :
            ; println("Int(%_)" % [i])
            i
        (s:String) :
            ; println("String(%_)" % [s])
            s
        (x:StringSymbol) :
            ; println("%_ = %_" % [x, get?(env, x)])
            get?(env, x)
        (L:List) :
            if empty?(L):
                L
            else:
                eval-exp(env, L)
